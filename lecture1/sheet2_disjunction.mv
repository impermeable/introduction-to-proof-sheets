# 1.1 Propositional logic<hint title="ðŸ“¦ Import libraries (click to open/close)">
```coq
Require Import Waterproof.Tactics.
Require Import Waterproof.Notations.Common.
Require Import Waterproof.Notations.Sets.
Require Import Waterproof.Notations.Reals.
Require Import Waterproof.Notations.Integers.
Require Import Waterproof.Notations.RealsWithSubsets.
Require Import Waterproof.Chains.
Require Import Waterproof.Automation.

Require Import Waterproof.Libs.Integers.Divisibility.
Require Import Waterproof.Libs.Reals.Rational.

Require Import Coq.Reals.Reals.


Notation "[ ( % @ < x 'and'" := x (at level 0, only parsing).
Notation "[ ( % @ < x 'as'" := x (at level 0, only parsing).
Notation "[ ( % @ < x 'hold'" := x (at level 0, only parsing).
Notation "[ ( % @ < x 'it'" := x (at level 0, only parsing).
Notation "[ ( % @ < x 'holds'" := x (at level 0, only parsing).
Notation "[ ( % @ < x 'we'" := x (at level 0, only parsing).
Notation "[ ( % @ < x 'or'" := x (at level 0, only parsing).

Open Scope subset_scope.
Open Scope R_scope.
Open Scope Z_scope.
Close Scope R2_scope.

Waterproof Set Shorten Databases RealsAndIntegers wp_integers.

Waterproof Enable Automation Empty.

Waterproof Declare Automation Logic.
Waterproof Set Main Databases Logic nocore, wp_prop_logic.
Waterproof Set Decidability Databases Logic nocore, wp_prop_logic.
Waterproof Set Shorten Databases Logic nocore, wp_prop_logic, wp_integers.

Waterproof Enable Automation Logic.
```
</hint>

Proving disjunctions (1.1.15) can be done in a similar way to assuming conjunctions (1.1.10).
Although they involve very different strategies, both use the phrase `It holds that [statement]`, as demonstrated in `example1_1_15`.

The first approach is used when you want to prove a disjunction (an 'or' statement), while the second is used when a conjunction (an 'and' statement) is already present in the assumptions.

Note that Waterproof automatically infers which rule to apply when you write `It holds that ...`.

```coq
Example example1_1_18left (p q r s : Prop) : 
  p â‡’ r â‡’ (p âˆ¨ q) âˆ§ (r âˆ¨ s).
Proof.
Assume that p and r.
It holds that p âˆ¨ q.
It holds that r âˆ¨ s.
We show both statements.
- We conclude p âˆ¨ q.
- We conclude r âˆ¨ s.
Qed.
```

Do the exercise below to practice proving disjunctions (1.1.16). This exercise is not in the book.

```coq
Lemma strategy_1_1_13_extra_ex (p q r : Prop) : 
  p â‡’ (p âˆ¨ q) âˆ¨ r.
Proof.
Assume that p.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

Below is an example of assuming disjunctions (proof by cases, 1.1.19).
This is done by using `Either [statement] or [statement]`.

```coq
Example example_1_1_20 (p q r : Prop) : 
  (p âˆ¨ q) âˆ§ r â‡’ p âˆ¨ (q âˆ§ r).
Proof.
Assume that (p âˆ¨ q) âˆ§ r.
It holds that p âˆ¨ q.
It holds that r.
Either p or q.
- Case p.
  We conclude p âˆ¨ (q âˆ§ r).
- Case q.
  It holds that q âˆ§ r.
  We conclude p âˆ¨ (q âˆ§ r).
Qed.
```

Do the exercise below to practice using proof by cases.

```coq
Lemma exercise_1_1_21 (p q r : Prop) : 
  (q âˆ¨ r) â‡’ (p âˆ¨ q) âˆ¨ (p âˆ¨ r).
Proof.
Assume that q âˆ¨ r.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```
