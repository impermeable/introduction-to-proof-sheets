
# 1.2 Variables and quantifiers<hint title="üì¶ Import libraries (click to open/close)">
```coq
Require Import Waterproof.Tactics.
Require Import Waterproof.Notations.Common.
Require Import Waterproof.Notations.Sets.
Require Import Waterproof.Notations.Reals.
(* Require Import Waterproof.Notations.RealsWithSubsets. *)
Require Import Waterproof.Notations.Integers.
Require Import Waterproof.Chains.
Require Import Waterproof.Automation.

Require Import Waterproof.Libs.Reals.Rational.
Require Import Waterproof.Libs.Reals.Integer.


Require Import Coq.Reals.Reals.
Require Import Coq.ZArith.Zeven.

Open Scope subset_scope.
Open Scope Z_scope.
(* Close Scope R2_scope. *)

Notation "[ ( % @ < x 'and'" := x (at level 0, only parsing).
Notation "[ ( % @ < x 'as'" := x (at level 0, only parsing).
Notation "[ ( % @ < x 'hold'" := x (at level 0, only parsing).
Notation "[ ( % @ < x 'it'" := x (at level 0, only parsing).
Notation "[ ( % @ < x 'holds'" := x (at level 0, only parsing).
Notation "[ ( % @ < x 'we'" := x (at level 0, only parsing).
Notation "[ ( % @ < x 'or'" := x (at level 0, only parsing).


Waterproof Enable Automation Empty.

Waterproof Declare Automation Logic.
Waterproof Set Main Databases Logic nocore, wp_prop_logic, wp_first_order_logic.
Waterproof Set Decidability Databases Logic nocore, wp_prop_logic, wp_first_order_logic.
Waterproof Set Shorten Databases Logic nocore, wp_prop_logic, wp_integers, wp_first_order_logic.

Waterproof Enable Automation Logic.
Waterproof Enable Automation RealsAndIntegers.

Waterproof List Automation Databases.

Local Ltac2 unfold_zeven (statement : constr) := eval unfold Zeven in $statement.
Ltac2 Notation "Expand" "the" "definition" "of" "even" x(opt(seq("in", constr))) :=
  wp_unfold unfold_zeven (Some "even") true x.
Ltac2 Notation "_internal_" "Expand" "the" "definition" "of" "even" x(opt(seq("in", constr))) :=
  wp_unfold unfold_zeven (Some "even") false x.

Local Ltac2 unfold_zodd (statement : constr) := eval unfold Zodd in $statement.
Ltac2 Notation "Expand" "the" "definition" "of" "odd" x(opt(seq("in", constr))) :=
  wp_unfold unfold_zodd (Some "odd") true x.
Ltac2 Notation "_internal_" "Expand" "the" "definition" "of" "odd" x(opt(seq("in", constr))) :=
  wp_unfold unfold_zodd (Some "odd") false x.


Declare Scope R2_scope.

Notation "'‚Ñ§'" := Z_in_R : R2_scope.
Notation "'‚Ñö'" := Q_in_R : R2_scope.


Notation "q 'is' 'rational'" := (is_rational q) (at level 70) : R_scope.


Definition is_irrational (x : ‚Ñù) : Prop := ¬¨ (is_rational x).

Notation "q 'is' 'irrational'" := (is_irrational q) (at level 70) : R_scope.


Local Ltac2 unfold_is_rational (statement : constr) := eval unfold is_rational in $statement.

Ltac2 Notation "Expand" "the" "definition" "of" "rational" x(opt(seq("in", constr))) :=
  wp_unfold unfold_is_rational (Some "rational") true x.
Ltac2 Notation "_internal_" "Expand" "the" "definition" "of" "rational" x(opt(seq("in", constr))) :=
  wp_unfold unfold_is_rational (Some "rational") false x.

Local Ltac2 unfold_is_irrational (statement : constr) := eval unfold is_irrational in $statement.

Ltac2 Notation "Expand" "the" "definition" "of" "irrational" x(opt(seq("in", constr))) :=
  wp_unfold unfold_is_irrational (Some "irrational") true x.
Ltac2 Notation "_internal_" "Expand" "the" "definition" "of" "irrational" x(opt(seq("in", constr))) :=
  wp_unfold unfold_is_irrational (Some "irrational") false x.


(* Set Default Timeout 10. *)
```
</hint>

## Proposition 1.2.11

In this proposition we see an example of the existential quantifier. We will treat this in more detail
later. For now, just use this pattern to prove things
about odd and even.

```coq
Lemma proposition1_2_11 (n : ‚Ñ§) : n is odd ‚áí n*n is odd.
Proof.
Assume that n is odd.
It holds that ‚àÉ k ‚àà ‚Ñ§, n = 2 * k + 1.
Obtain such k.
It holds that n * n = 2 * (2 * k * k + 2 * k) + 1.
We conclude that n * n is odd.
Qed.
```

<hint title="üì¶ Technical details">
```coq
Open Scope R_scope.
```
</hint>

To introduce an arbitrary variable in Waterproof,
use `Take ... ‚àà ...`

```coq
Example example_1_2_13 : ‚àÄ x ‚àà ‚Ñù, x ‚â§ 0 ‚à® x ‚â• 0.
Proof.
Take x ‚àà ‚Ñù.
Either x ‚â§ 0 or ¬¨(x ‚â§ 0).
- Case x ‚â§ 0.
  We conclude that x ‚â§ 0 ‚à® x ‚â• 0.
- Case ¬¨(x ‚â§ 0).
  It holds that x > 0.
  It holds that x ‚â• 0.
  We conclude that x ‚â§ 0 ‚à® x ‚â• 0.
Qed.
```

```coq
Lemma exercise_1_2_14 : ‚àÄ x ‚àà ‚Ñù, x = x.
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

<hint title="üì¶ Technical details">
```coq
Open Scope Z_scope.
```
</hint>

```coq
Lemma exercise_1_2_15 (P : ‚Ñù ‚Üí Prop) :
  ‚àÄ n ‚àà ‚Ñ§, n is even ‚Üî n * n is even.
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

<hint title="üì¶ Technical details">
```coq
Open Scope R_scope.
```
</hint>

```coq
Example example_1_2_20 (P : ‚Ñù ‚Üí Prop) :
  (‚àÄ x ‚àà ‚Ñù, P(x)) ‚áí P 0.
Proof.
Assume that ‚àÄ x ‚àà ‚Ñù, P(x) as (i).
Use x := 0 in (i).
{ Indeed, 0 ‚àà ‚Ñù. }
It holds that P(0).
We conclude that P(0).
Qed.
```


```coq
Example exercise_1_2_21 (P : ‚Ñù ‚Üí Prop) :
  (‚àÄ x ‚àà ‚Ñù, P(x)) ‚áí P 21.
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

```coq
Lemma exercise_1_2_22 (P Q : ‚Ñù ‚áí Prop) :
  (‚àÄ x ‚àà ‚Ñù, P(x) ‚áí Q(x)) ‚áí
  (‚àÄ x ‚àà ‚Ñù, P(x)) ‚áí (‚àÄ x ‚àà ‚Ñù, Q(x)).
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```

<hint title="üì¶ Technical details">
```coq
Open Scope R2_scope.
```
</hint>

```coq
Lemma exercise1_2_18 : ‚àÄ x ‚àà ‚Ñù, ‚àÄ y ‚àà R,
  ¬¨(x is rational) ‚áí
    ¬¨((x + y) is rational ‚àß (x - y) is rational).
Proof.
```
<input-area>
```coq

```
</input-area>
```coq
Qed.
```
